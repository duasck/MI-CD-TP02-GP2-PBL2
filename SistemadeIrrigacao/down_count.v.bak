module down_count (
    input wire clk,
    input wire load,
    input wire [3:0] data_in,
    input wire up_down,
    input wire cten,
    output wire [3:0] q,
    output wire rco,
    output wire max_min
);
    wire [3:0] j, k;
    wire [3:0] d;
    wire [3:0] next_q;

    // Assign the J and K inputs for the JK flip-flops based on up/down control and the current state
    assign j[0] = (~up_down & q[0]) | (up_down & ~q[0]);
    assign k[0] = (~up_down & ~q[0]) | (up_down & q[0]);

    assign j[1] = (~up_down & (q[1] & q[0])) | (up_down & (~q[1] & q[0]));
    assign k[1] = (~up_down & (~q[1] & q[0])) | (up_down & (q[1] & q[0]));

    assign j[2] = (~up_down & (q[2] & q[1] & q[0])) | (up_down & (~q[2] & q[1] & q[0]));
    assign k[2] = (~up_down & (~q[2] & q[1] & q[0])) | (up_down & (q[2] & q[1] & q[0]));

    assign j[3] = (~up_down & (q[3] & q[2] & q[1] & q[0])) | (up_down & (~q[3] & q[2] & q[1] & q[0]));
    assign k[3] = (~up_down & (~q[3] & q[2] & q[1] & q[0])) | (up_down & (q[3] & q[2] & q[1] & q[0]));

    // Logic for next state
    assign next_q[0] = q[0] ^ (up_down & cten);
    assign next_q[1] = q[1] ^ ((q[0] & up_down & cten) | (~q[0] & ~up_down & cten));
    assign next_q[2] = q[2] ^ ((q[1] & q[0] & up_down & cten) | (~q[1] & ~q[0] & ~up_down & cten));
    assign next_q[3] = q[3] ^ ((q[2] & q[1] & q[0] & up_down & cten) | (~q[2] & ~q[1] & ~q[0] & ~up_down & cten));

    // Multiplexers for load or count
    assign d[0] = (load & data_in[0]) | (~load & next_q[0]);
    assign d[1] = (load & data_in[1]) | (~load & next_q[1]);
    assign d[2] = (load & data_in[2]) | (~load & next_q[2]);
    assign d[3] = (load & data_in[3]) | (~load & next_q[3]);

    // Instantiate JK flip-flops
    jk_ff ff0 (.clk(clk), .j(j[0]), .k(k[0]), .r(~cten), .d(d[0]), .q(q[0]));
    jk_ff ff1 (.clk(clk), .j(j[1]), .k(k[1]), .r(~cten), .d(d[1]), .q(q[1]));
    jk_ff ff2 (.clk(clk), .j(j[2]), .k(k[2]), .r(~cten), .d(d[2]), .q(q[2]));
    jk_ff ff3 (.clk(clk), .j(j[3]), .k(k[3]), .r(~cten), .d(d[3]), .q(q[3]));

    // Ripple carry output
    assign rco = (up_down & q == 4'b1111) | (~up_down & q == 4'b0000);

    // Maximum/minimum state output
    assign max_min = rco;

endmodule